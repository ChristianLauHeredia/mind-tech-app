{
  "name": "match",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "match-candidates",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "74e54ec6-f991-4609-91e3-e94a370233a3",
      "name": "Webhook (Teams Intake)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -352,
        112
      ],
      "webhookId": "55551502-b48f-4d5f-9b9e-048152e1b656"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e397fa92-3045-4ab9-9834-9f6edce57761",
              "leftValue": "={{ $json.body.text }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": false
        }
      },
      "id": "4590c009-735a-4fc2-a841-f3b093ec13cd",
      "name": "IF — Has Text?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -144,
        112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mind-tech-app-h68q.vercel.app/api/requests",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Webhook (Teams Intake)').item.json.body?.text || $('Extract from File').item.json.text }}"
            },
            {
              "name": "candidates",
              "value": "={{ $json.message.content.candidates }}"
            }
          ]
        },
        "options": {}
      },
      "id": "92ea91d0-fb52-49f1-8d6f-5267ab87c42a",
      "name": "HTTP — /api/requests (audit)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1088,
        256
      ],
      "notesInFlow": true,
      "executeOnce": true,
      "credentials": {
        "httpBasicAuth": {
          "id": "0hUVwut8IHFKpAJw",
          "name": "Unnamed credential"
        }
      },
      "notes": "Configura AUTH: Basic (admin/password123)"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "af9103cc-3bed-40f4-9293-9f19ec232700",
      "name": "Respond 200 (Teams)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1248,
        256
      ]
    },
    {
      "parameters": {
        "text": "=Eres un parser técnico. Devuelves EXCLUSIVAMENTE JSON válido (sin texto extra, ni markdown), con este esquema:\n{\n  \"role\": string,\n  \"seniority\": \"JR\" | \"SSR\" | \"SR\" | \"STAFF\" | \"PRINC\",\n  \"must_have\": string[],\n  \"nice_to_have\": string[],\n  \"extra_keywords\": string[]\n}\nNormaliza a minúsculas las skills. Seniority en mayúsculas exactas (JR|SSR|SR|STAFF|PRINC).\nSi falta algo, infiérelo conservadoramente o deja lista vacía; nunca inventes datos no sustentados.\nResponde SOLO el JSON, sin acentos raros ni comentarios. {{ $json.text }}\n",
        "schemaType": "manual",
        "inputSchema": "{\n  \"role\": \"string\",\n  \"seniority\": \"string\",\n  \"must_have\": \"array\",\n  \"nice_to_have\": \"array\",\n  \"extra_keywords\": \"array\"\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        320,
        96
      ],
      "id": "561c1b9f-0e8d-4b69-b14a-fb7d10cefb86",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        320,
        288
      ],
      "id": "23f62cc8-4511-486d-bbbe-21c2c64e5b40",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "sOsc63iYlMxarcdx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "=file",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        96,
        240
      ],
      "id": "48a859c0-adb3-404c-ae79-b00a88caae33",
      "name": "Extract from File",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mind-tech-app-h68q.vercel.app/api/match",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-vercel-protection-bypass",
              "value": "GCOdY8B022oB65JPWqcPd89wghiMmMyn"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "role",
              "value": "={{ $json.output.role }}"
            },
            {
              "name": "seniority",
              "value": "={{ $json.output.seniority }}"
            },
            {
              "name": "must_have",
              "value": "={{ $json.output.must_have }}"
            },
            {
              "name": "nice_to_have",
              "value": "={{ $json.output.nice_to_have }}"
            },
            {
              "name": "extra_keywords",
              "value": "={{ $json.output.extra_keywords }}"
            }
          ]
        },
        "options": {}
      },
      "id": "52da5c91-8288-42a7-9cd2-f8b3af528046",
      "name": "match",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        608,
        96
      ],
      "notesInFlow": true,
      "alwaysOutputData": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "0hUVwut8IHFKpAJw",
          "name": "Unnamed credential"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=Eres un asistente experto en matching de talento técnico.\n\nRecibirás:\n- Un array JSON de candidatos evaluados (con campos como employee_id, match_score, matched_skills, seniority, cv_index.role/seniority/must_have).\n- Un texto con la descripción del rol.\n\nCANDIDATES_JSON:\n={{ JSON.stringify($(\"match\").all().map(item => item.json)) }}\n\nROLE_DESCRIPTION:\n{{ $('Webhook (Teams Intake)').item.json.body?.text || $('Extract from File').item?.json.text }}\n\nObjetivo:\nGenera un nuevo arreglo JSON con **máximo 5 candidatos**, ordenados por `match_score` descendente, con el siguiente formato EXACTO:\n\n[\n  {\n    \"employee_id\": \"uuid1\",\n    \"summary\": \"Breve explicación profesional (≤15 palabras) de por qué encaja según la descripción y su perfil\",\n    \"score\": number,\n    \"match_details\": {\n      \"matched_skills\": [...],\n      \"seniority_match\": boolean,\n      \"role_match\": boolean\n    }\n  }\n]\n\nInstrucciones de análisis:\n1) Extrae de ROLE_DESCRIPTION el rol objetivo, seniority objetivo y habilidades clave (must-have). Normaliza términos (ej.: \"js\" ≈ \"javascript\", \"nodejs\" ≈ \"node.js\"). No inventes skills.\n2) Para cada candidato:\n   - score: usa `match_score` del candidato (no recalcules).\n   - matched_skills: parte de `matched_skills` ya calculadas y filtra/reordena priorizando las habilidades que aparecen en ROLE_DESCRIPTION. Si `matched_skills` está vacío, cruza `cv_index.must_have` contra ROLE_DESCRIPTION y devuelve coincidencias reales.\n   - seniority_match: true si `cv_index.seniority` o `seniority` del candidato coincide con el seniority objetivo extraído del texto.\n   - role_match: true si `cv_index.role` (o rol indicado) coincide semánticamente con el rol objetivo del texto (e.g., \"front end\" ≈ \"frontend developer\").\n   - summary: una sola frase (≤15 palabras), clara y profesional, destacando el motivo principal del encaje (p. ej., tecnologías clave + seniority).\n\nReglas de salida:\n- Devuelve SOLO JSON válido, sin comentarios ni texto adicional.\n- Máximo 5 candidatos, ordenados por `score` desc.\n- Si algún campo requerido falta, dedúcelo cuidadosamente de los datos existentes; si no es posible, excluye al candidato.\n- Backend no es lo mismo que Front end, si algo no te hace sentido par el match, podemos descartarlo\n"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        800,
        256
      ],
      "id": "9251c97b-e8a0-4dc7-9e26-ebad5b0a9747",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "sOsc63iYlMxarcdx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ecd6a1d-43a4-4dcb-90b3-dcb7140f00b3",
              "name": "requester",
              "value": "=admin",
              "type": "string"
            },
            {
              "id": "5fad9bb8-120b-41a4-8dfa-bb1a9ffcc110",
              "name": "channel_id",
              "value": "={{ $json.body.channel_id }}",
              "type": "string"
            },
            {
              "id": "7f61126c-2669-46f8-9c76-051181206631",
              "name": "text",
              "value": "={{ $json.body.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        96,
        96
      ],
      "id": "7c223eca-3f38-4f63-a238-e5b7ab0685c0",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fromEmail": "lau.heredia95@gmail.com",
        "toEmail": "cheredia@arkusnexus.com",
        "subject": "n8n workflow failed",
        "html": "=ERROR - {{ $json.error }}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        624,
        608
      ],
      "id": "6d6c74fd-5aef-45a9-9d78-107d0bef4492",
      "name": "Send email",
      "webhookId": "8329fbf4-ddae-4dfc-b8d3-5bb6f4c66fea",
      "credentials": {
        "smtp": {
          "id": "b4H6E7uNdRGXQrm2",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "options": {}
      },
      "id": "5223d328-3f0f-4f7f-9947-8632a4aa6490",
      "name": "Respond 200 (Teams)1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1040,
        496
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e397fa92-3045-4ab9-9834-9f6edce57761",
              "leftValue": "={{ $(\"match\") }}",
              "rightValue": "true",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": false
        }
      },
      "id": "42463b04-aa1c-4c6f-b9d5-e1540dafbc5c",
      "name": "error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        576,
        304
      ]
    },
    {
      "parameters": {
        "fromEmail": "lau.heredia95@gmail.com",
        "toEmail": "cheredia@arkusnexus.com",
        "subject": "n8n workflow failed",
        "html": "=API Matching Error",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        624,
        464
      ],
      "id": "fc611221-9bf5-47da-91ce-f66d45572416",
      "name": "Send email1",
      "webhookId": "8329fbf4-ddae-4dfc-b8d3-5bb6f4c66fea",
      "credentials": {
        "smtp": {
          "id": "b4H6E7uNdRGXQrm2",
          "name": "SMTP account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "IF — Has Text?": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook (Teams Intake)": {
      "main": [
        [
          {
            "node": "IF — Has Text?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "match",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "HTTP — /api/requests (audit)": {
      "main": [
        [
          {
            "node": "Respond 200 (Teams)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "match": {
      "main": [
        [
          {
            "node": "error?",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "HTTP — /api/requests (audit)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond 200 (Teams)": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send email": {
      "main": [
        [
          {
            "node": "Respond 200 (Teams)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error?": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send email1": {
      "main": [
        [
          {
            "node": "Respond 200 (Teams)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dd5f46dc-d9b3-4c57-92b1-8826e05c76b7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "263d2fcf3e8383b54eaa1065f2abd654e7afc715b3d3d3d30a23fd217465165b"
  },
  "id": "ruDpu7Y1NPDvfCap",
  "tags": []
}